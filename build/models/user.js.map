{"version":3,"sources":["../../src/models/user.js"],"names":["sequelize","DataTypes","User","define","username","type","STRING","unique","password","firstName","lastName","email","favoriteRecipes","ARRAY","INTEGER","associate","hasMany","models","Recipe","findByLogin","login","findOne","where","user","findById","id"],"mappings":";;;;;;;;kBAAe,UAACA,SAAD,EAAYC,SAAZ,EAA0B;AACvC,MAAMC,OAAOF,UAAUG,MAAV,CAAiB,MAAjB,EAAyB;AACpCC,cAAU;AACRC,YAAMJ,UAAUK,MADR;AAERC,cAAQ;AAFA,KAD0B;AAKpCC,cAAU;AACRH,YAAMJ,UAAUK;AADR,KAL0B;AAQpCG,eAAW;AACTJ,YAAMJ,UAAUK;AADP,KARyB;AAWpCI,cAAU;AACRL,YAAMJ,UAAUK;AADR,KAX0B;AAcpCK,WAAO;AACLN,YAAMJ,UAAUK;AADX,KAd6B;AAiBpCM,qBAAiB;AACfP,YAAMJ,UAAUY,KAAV,CAAgBZ,UAAUa,OAA1B;AADS;AAjBmB,GAAzB,CAAb;;AAsBAZ,OAAKa,SAAL,GAAiB,kBAAU;AACzBb,SAAKc,OAAL,CAAaC,OAAOC,MAApB;AACD,GAFD;;AAIAhB,OAAKiB,WAAL;AAAA,uEAAmB,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACAlB,KAAKmB,OAAL,CAAa;AAC5BC,uBAAO,EAAElB,UAAUgB,KAAZ;AADqB,eAAb,CADA;;AAAA;AACbG,kBADa;;AAAA,kBAKZA,IALY;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAMFrB,KAAKmB,OAAL,CAAa;AACxBC,uBAAO,EAAEX,OAAOS,KAAT;AADiB,eAAb,CANE;;AAAA;AAMfG,kBANe;;AAAA;AAAA,+CAUVA,IAVU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA;;AAaArB,OAAKsB,QAAL;AAAA,wEAAgB,kBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACGvB,KAAKmB,OAAL,CAAa;AAC5BC,uBAAO,EAAEG,MAAF;AADqB,eAAb,CADH;;AAAA;AACVF,kBADU;AAAA,gDAKPA,IALO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAOrB,IAAP;AACD,C","file":"user.js","sourcesContent":["export default (sequelize, DataTypes) => {\n  const User = sequelize.define('user', {\n    username: {\n      type: DataTypes.STRING,\n      unique: true\n    },\n    password: {\n      type: DataTypes.STRING\n    },\n    firstName: {\n      type: DataTypes.STRING\n    },\n    lastName: {\n      type: DataTypes.STRING\n    },\n    email: {\n      type: DataTypes.STRING\n    },\n    favoriteRecipes: {\n      type: DataTypes.ARRAY(DataTypes.INTEGER)\n    }\n  });\n\n  User.associate = models => {\n    User.hasMany(models.Recipe);\n  };\n\n  User.findByLogin = async login => {\n    let user = await User.findOne({\n      where: { username: login }\n    });\n\n    if (!user) {\n      user = await User.findOne({\n        where: { email: login }\n      });\n    }\n    return user;\n  };\n\n  User.findById = async id => {\n    let user = await User.findOne({\n      where: { id }\n    });\n\n    return user;\n  };\n\n  return User;\n};\n"]}