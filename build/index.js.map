{"version":3,"sources":["../src/index.js"],"names":["app","corsOptions","origin","cb","process","env","WHITELIST","indexOf","Error","JwtStrategy","passportJWT","Strategy","ExtractJwt","use","req","res","next","headers","console","log","header","passport","initialize","bodyParser","json","urlencoded","extended","context","jwtFromRequest","cookies","JWTAuth","secretOrKey","KEY","jwt_payload","done","models","User","findById","id","user","message","eraseDatabaseOnSync","sequelize","sync","force","then","listen","PORT"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,MAAM,wBAAZ;;AAEA,IAAIC,cAAc;AAChBC,UAAQ,gBAASA,OAAT,EAAiBC,EAAjB,EAAqB;AAC3B,QAAIC,QAAQC,GAAR,CAAYC,SAAZ,CAAsBC,OAAtB,CAA8BL,OAA9B,MAA0C,CAAC,CAA/C,EAAkD;AAChDC,SAAG,IAAH,EAAS,IAAT;AACD,KAFD,MAEO;AACLA,SAAG,IAAIK,KAAJ,CAAU,4CAAV,CAAH;AACD;AACF;AAPe,CAAlB;;AAUA,IAAMC,cAAcC,sBAAYC,QAAhC;AACA,IAAMC,aAAaF,sBAAYE,UAA/B;;AAEAZ,IAAIa,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,MAClBC,OADkB,GACNH,GADM,CAClBG,OADkB;;AAE1BC,UAAQC,GAAR,CAAY,iBAAZ,EAA+BF,OAA/B;AACAF,MAAIK,MAAJ,CAAW,6BAAX,EAA0CH,QAAQf,MAAlD;AACAa,MAAIK,MAAJ,CAAW,8BAAX,EAA2CH,OAA3C;AACAF,MAAIK,MAAJ,CAAW,kCAAX,EAA+C,IAA/C;AACAJ;AACD,CAPD;;AASAhB,IAAIa,GAAJ,CAAQ,6BAAR;AACAb,IAAIa,GAAJ,CAAQQ,mBAASC,UAAT,EAAR;AACAtB,IAAIa,GAAJ,CAAQ,oBAAKZ,WAAL,CAAR;AACAD,IAAIa,GAAJ,CAAQU,qBAAWC,IAAX,EAAR;AACAxB,IAAIa,GAAJ,CAAQU,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACA1B,IAAIa,GAAJ,CAAQc,mBAAR;;AAEAN,mBAASR,GAAT,CACE,SADF,EAEE,IAAIJ,WAAJ,CACE;AACEmB,kBAAgB;AAAA,WAAOd,IAAIe,OAAJ,CAAYC,OAAnB;AAAA,GADlB;AAEEC,eAAa3B,QAAQC,GAAR,CAAY2B;AAF3B,CADF;AAAA,qEAKE,iBAAeC,WAAf,EAA4BC,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqBC,iBAAOC,IAAP,CAAYC,QAAZ,CAAqBJ,YAAYK,EAAjC,CADrB;;AAAA;AACQC,gBADR;;AAEE,gBAAIA,IAAJ,EAAU;AACRL,mBAAK,IAAL,EAAWK,IAAX;AACD,aAFD,MAEO;AACLL,mBAAK,IAAL,EAAW,KAAX,EAAkB,EAAEM,SAAS,iBAAX,EAAlB;AACD;;AANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GALF;;AAAA;AAAA;AAAA;AAAA,IAFF;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAOxC,GAAP;;AAEA,IAAMyC,sBAAsB,KAA5B;AACAC,kBAAUC,IAAV,CAAe,EAAEC,OAAOH,mBAAT,EAAf,EAA+CI,IAA/C,yDAAoD;AAAA;AAAA;AAAA;AAAA;AAClD,cAAIJ,mBAAJ,EAAyB;AACvB;AACD;;AAEDzC,cAAI8C,MAAJ,CAAW1C,QAAQC,GAAR,CAAY0C,IAAvB,EAA6B,YAAM;AACjC7B,oBAAQC,GAAR,4BAAqCf,QAAQC,GAAR,CAAY0C,IAAjD;AACD,WAFD;;AALkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApD","file":"index.js","sourcesContent":["import 'regenerator-runtime/runtime';\nimport express from 'express';\nimport cors from 'cors';\nimport cookieParser from 'cookie-parser';\nimport bodyParser from 'body-parser';\nimport jwt from 'jsonwebtoken';\nimport passport from 'passport';\nimport passportJWT from 'passport-jwt';\nimport 'dotenv/config';\nimport models, { sequelize } from './models';\nimport { context } from './middleware';\nimport seed from './util/seed';\nimport router from './routes';\n\nconst app = express();\n\nlet corsOptions = {\n  origin: function(origin, cb) {\n    if (process.env.WHITELIST.indexOf(origin) !== -1) {\n      cb(null, true);\n    } else {\n      cb(new Error('Origin not whitlisted. Blocked by CORS! ☠️'));\n    }\n  }\n};\n\nconst JwtStrategy = passportJWT.Strategy;\nconst ExtractJwt = passportJWT.ExtractJwt;\n\napp.use((req, res, next) => {\n  const { headers } = req;\n  console.log('request headers', headers);\n  res.header('Access-Control-Allow-Origin', headers.origin);\n  res.header('Access-Control-Allow-Headers', headers);\n  res.header('Access-Control-Allow-Credentials', true);\n  next();\n});\n\napp.use(cookieParser());\napp.use(passport.initialize());\napp.use(cors(corsOptions));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(context);\n\npassport.use(\n  'JWTAuth',\n  new JwtStrategy(\n    {\n      jwtFromRequest: req => req.cookies.JWTAuth,\n      secretOrKey: process.env.KEY\n    },\n    async function(jwt_payload, done) {\n      const user = await models.User.findById(jwt_payload.id);\n      if (user) {\n        done(null, user);\n      } else {\n        done(null, false, { message: 'Not authorized!' });\n      }\n    }\n  )\n);\n\n// const session = passport.use(\n//   'JWTSession',\n//   new JwtStrategy(\n//     {\n//       jwtFromRequest: req => req.cookies.JWTSession,\n//       secretOrKey: process.env.KEY\n//     },\n//     function(jwt, done) {\n//       console.log('JWTSession', jwt);\n//       if (new Date(jwt.exp * 1000).getTime() < new Date().getTime()) {\n//         return done(null, false, { message: 'Your session has expired!' });\n//       } else {\n//         return done(null, {});\n//       }\n//     }\n//   )\n// );\n\n// const sessionMiddleware = (req, res, next) => {\n//   if (req.url === '/session') {\n//     next();\n//   } else {\n//     const { session } = req.cookies;\n//     console.log('session cookie', session);\n//     next();\n//   }\n// };\n\n// app.use(sessionMiddleware);\n\nrouter(app);\n\nconst eraseDatabaseOnSync = false;\nsequelize.sync({ force: eraseDatabaseOnSync }).then(async () => {\n  if (eraseDatabaseOnSync) {\n    seed();\n  }\n\n  app.listen(process.env.PORT, () => {\n    console.log(`App listening on port ${process.env.PORT}! 💻`);\n  });\n});\n"]}