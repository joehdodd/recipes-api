{"version":3,"sources":["../../src/routes/session.js"],"names":["router","post","req","res","next","body","username","password","context","models","User","findByLogin","user","status","json","message","bcrypt","compare","passwordMatch","payload","id","token","jwt","sign","process","env","KEY","domain","NODE_ENV","cookie","maxAge","send","error"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,SAAS,sBAAf;;AAEAA,OAAOC,IAAP,CAAY,GAAZ;AAAA,qEAAiB,iBAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACgBF,IAAIG,IADpB,EACPC,QADO,aACPA,QADO,EACGC,QADH,aACGA,QADH;;AAAA,kBAGXD,YAAYC,QAHD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIML,IAAIM,OAAJ,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwBC,WAAxB,CAAoCL,QAApC,CAJN;;AAAA;AAIPM,gBAJO;;AAAA,kBAMTA,SAAS,IAAT,IAAiB,CAACA,IANT;AAAA;AAAA;AAAA;;AAAA,6CAOJT,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAA6BH,UAA7B,EAArB,CAPI;;AAAA;AAAA;AAAA,mBAUeI,iBAAOC,OAAP,CAAeV,QAAf,EAAyBK,KAAKL,QAA9B,CAVf;;AAAA;AAUPW,yBAVO;;AAAA,iBAYTA,aAZS;AAAA;AAAA;AAAA;;AAaLC,mBAbK,GAaK,EAAEC,IAAIR,KAAKQ,EAAX,EAbL;AAcLC,iBAdK,GAcGC,uBAAIC,IAAJ,CAASJ,OAAT,EAAkBK,QAAQC,GAAR,CAAYC,GAA9B,CAdH;AAeLC,kBAfK,GAgBTH,QAAQC,GAAR,CAAYG,QAAZ,KAAyB,YAAzB,GAAwC,cAAxC,GAAyD,WAhBhD;;AAiBXzB,gBAAI0B,MAAJ,CAAW,SAAX,EAAsBR,KAAtB,EAA6B;AAC3BM,4BAD2B;AAE3BG,sBAAQ;AAFmB,aAA7B;AAjBW,6CAqBJ3B,IAAIU,MAAJ,CAAW,GAAX,EAAgBkB,IAAhB,CAAqB,EAAEnB,UAAF,EAArB,CArBI;;AAAA;AAAA,6CAuBJT,IACJU,MADI,CACG,GADH,EAEJC,IAFI,CAEC,EAAEC,SAAS,oBAAX,EAAiCiB,OAAO,IAAxC,EAFD,CAvBI;;AAAA;AAAA;AAAA;;AAAA;AAAA,6CA4BN7B,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iCAAX,EAArB,CA5BM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;;kBAgCef,M","file":"session.js","sourcesContent":["import { Router } from 'express';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\n\nconst router = Router();\n\nrouter.post('/', async function(req, res, next) {\n  const { username, password } = req.body;\n\n  if (username && password) {\n    const user = await req.context.models.User.findByLogin(username);\n\n    if (user === null || !user) {\n      return res.status(401).json({ message: 'User not found', user });\n    }\n\n    const passwordMatch = await bcrypt.compare(password, user.password);\n\n    if (passwordMatch) {\n      const payload = { id: user.id };\n      const token = jwt.sign(payload, process.env.KEY);\n      const domain =\n        process.env.NODE_ENV === 'production' ? 'recipes.casa' : 'localhost';\n      res.cookie('JWTAuth', token, {\n        domain,\n        maxAge: 604800000\n      });\n      return res.status(200).send({ user });\n    } else {\n      return res\n        .status(401)\n        .json({ message: 'Incorrect password', error: true });\n    }\n  } else {\n    return res.status(401).json({ message: 'Username and password reqiured.' });\n  }\n});\n\nexport default router;\n"]}