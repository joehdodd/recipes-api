{"version":3,"sources":["../../src/routes/recipe.js"],"names":["router","get","req","res","context","models","Recipe","findAll","recipes","status","json","message","data","JWTAuth","findById","params","recipeId","recipe","post","body","instructions","ingredients","console","log","trim","ingredientsArray","split","map","s","instructionsArray","create","title","description","userId","user","dataValues","id"],"mappings":";;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,SAAS,sBAAf;;AAEAA,OAAOC,GAAP,CAAW,GAAX;AAAA,qEAAgB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQD,IAAIE,OAAJ,CAAYC,MAAZ,CAAmBC,MAAnB,CAA0BC,OAA1B,EADR;;AAAA;AACRC,mBADQ;AAAA,6CAEPL,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,MAAMJ,OAAxB,EAArB,CAFO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;;AAKAR,OAAOC,GAAP,CAAW,YAAX,EAAyBY,iBAAzB;AAAA,sEAAkC,kBAAOX,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXD,IAAIE,OAAJ,CAAYC,MAAZ,CAAmBC,MAAnB,CAA0BQ,QAA1B,CAAmCZ,IAAIa,MAAJ,CAAWC,QAA9C,CADW;;AAAA;AAC1BC,kBAD0B;AAAA,8CAEzBd,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,MAAMK,MAAxB,EAArB,CAFyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAAA;AAAA;AAAA;AAAA;;AAKAjB,OAAOkB,IAAP,CAAY,GAAZ,EAAiBL,iBAAjB;AAAA,sEAA0B,kBAAOX,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACcD,IAAIiB,IADlB,EAChBC,YADgB,aAChBA,YADgB,EACFC,WADE,aACFA,WADE;;AAExBC,oBAAQC,GAAR,CAAYH,aAAaI,IAAb,EAAZ;AACIC,4BAHoB,GAGDJ,YAAYK,KAAZ,CAAkB,GAAlB,EAAuBC,GAAvB,CAA2B;AAAA,qBAAKC,EAAEJ,IAAF,EAAL;AAAA,aAA3B,CAHC;AAIpBK,6BAJoB,GAIAT,aAAaM,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4B;AAAA,qBAAKC,EAAEJ,IAAF,EAAL;AAAA,aAA5B,CAJA;AAAA;AAAA,mBAKHtB,IAAIE,OAAJ,CAAYC,MAAZ,CAAmBC,MAAnB,CAA0BwB,MAA1B,CAAiC;AACpDC,qBAAO7B,IAAIiB,IAAJ,CAASY,KADoC;AAEpDC,2BAAa9B,IAAIiB,IAAJ,CAASa,WAF8B;AAGpDC,sBAAQ/B,IAAIgC,IAAJ,CAASC,UAAT,CAAoBC,EAHwB;AAIpDf,2BAAaI,gBAJuC;AAKpDL,4BAAcS;AALsC,aAAjC,CALG;;AAAA;AAKlBZ,kBALkB;;AAYxBK,oBAAQC,GAAR,CAAY,eAAZ,EAA6BN,MAA7B;AAZwB,8CAajBd,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,MAAMK,MAAxB,EAArB,CAbiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;kBAeejB,M","file":"recipe.js","sourcesContent":["import { Router } from 'express';\nimport JWTAuth from '../middleware/JWTAuth';\n\nconst router = Router();\n\nrouter.get('/', async (req, res) => {\n  const recipes = await req.context.models.Recipe.findAll();\n  return res.status(200).json({ message: 'Ok!', data: recipes });\n});\n\nrouter.get('/:recipeId', JWTAuth, async (req, res) => {\n  const recipe = await req.context.models.Recipe.findById(req.params.recipeId);\n  return res.status(200).json({ message: 'Ok!', data: recipe });\n});\n\nrouter.post('/', JWTAuth, async (req, res) => {\n  const { instructions, ingredients } = req.body;\n  console.log(instructions.trim());\n  let ingredientsArray = ingredients.split(',').map(s => s.trim());\n  let instructionsArray = instructions.split(',').map(s => s.trim());\n  const recipe = await req.context.models.Recipe.create({\n    title: req.body.title,\n    description: req.body.description,\n    userId: req.user.dataValues.id,\n    ingredients: ingredientsArray,\n    instructions: instructionsArray\n  });\n  console.log('create recipe', recipe);\n  return res.status(200).json({ message: 'Ok!', data: recipe });\n});\nexport default router;\n"]}