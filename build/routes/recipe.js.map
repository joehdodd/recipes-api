{"version":3,"sources":["../../src/routes/recipe.js"],"names":["router","get","req","res","recipes","query","user","id","dataValues","context","models","Recipe","findByUserId","findAll","status","json","message","data","JWTAuth","findById","params","recipeId","recipe","post","body","instructions","ingredients","console","log","trim","ingredientsArray","split","map","s","instructionsArray"],"mappings":";;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,SAAS,sBAAf;;AAEAA,OAAOC,GAAP,CAAW,GAAX;AAAA,qEAAgB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,mBADU,GACA,EADA;;AAAA,kBAEVF,IAAIG,KAAJ,IAAaH,IAAIG,KAAJ,CAAUC,IAFb;AAAA;AAAA;AAAA;;AAGJC,cAHI,GAGGL,IAAII,IAAJ,CAASE,UAHZ,CAGJD,EAHI;AAAA;AAAA,mBAIIL,IAAIO,OAAJ,CAAYC,MAAZ,CAAmBC,MAAnB,CAA0BC,YAA1B,CAAuCL,EAAvC,CAJJ;;AAAA;AAIZH,mBAJY;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAMIF,IAAIO,OAAJ,CAAYC,MAAZ,CAAmBC,MAAnB,CAA0BE,OAA1B,EANJ;;AAAA;AAMZT,mBANY;;AAAA;AAAA,6CAQPD,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,MAAMb,OAAxB,EAArB,CARO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;;AAWAJ,OAAOC,GAAP,CAAW,YAAX,EAAyBiB,iBAAzB;AAAA,sEAAkC,kBAAOhB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXD,IAAIO,OAAJ,CAAYC,MAAZ,CAAmBC,MAAnB,CAA0BQ,QAA1B,CAAmCjB,IAAIkB,MAAJ,CAAWC,QAA9C,CADW;;AAAA;AAC1BC,kBAD0B;AAAA,8CAEzBnB,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,MAAMK,MAAxB,EAArB,CAFyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAAA;AAAA;AAAA;AAAA;;AAKAtB,OAAOuB,IAAP,CAAY,GAAZ,EAAiBL,iBAAjB;AAAA,sEAA0B,kBAAOhB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACcD,IAAIsB,IADlB,EAChBC,YADgB,aAChBA,YADgB,EACFC,WADE,aACFA,WADE;;AAExBC,oBAAQC,GAAR,CAAYH,aAAaI,IAAb,EAAZ;AACIC,4BAHoB,GAGDJ,YAAYK,KAAZ,CAAkB,GAAlB,EAAuBC,GAAvB,CAA2B;AAAA,qBAAKC,EAAEJ,IAAF,EAAL;AAAA,aAA3B,CAHC;AAIpBK,6BAJoB,GAIAT,aAAaM,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4B;AAAA,qBAAKC,EAAEJ,IAAF,EAAL;AAAA,aAA5B,CAJA;;AAKxBF,oBAAQC,GAAR,CAAYE,gBAAZ;AACAH,oBAAQC,GAAR,CAAYM,iBAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAbwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;kBAeelC,M","file":"recipe.js","sourcesContent":["import { Router } from 'express';\nimport JWTAuth from '../middleware/JWTAuth';\n\nconst router = Router();\n\nrouter.get('/', async (req, res) => {\n  let recipes = [];\n  if (req.query && req.query.user) {\n    const { id } = req.user.dataValues;\n    recipes = await req.context.models.Recipe.findByUserId(id);\n  } else {\n    recipes = await req.context.models.Recipe.findAll();\n  }\n  return res.status(200).json({ message: 'Ok!', data: recipes });\n});\n\nrouter.get('/:recipeId', JWTAuth, async (req, res) => {\n  const recipe = await req.context.models.Recipe.findById(req.params.recipeId);\n  return res.status(200).json({ message: 'Ok!', data: recipe });\n});\n\nrouter.post('/', JWTAuth, async (req, res) => {\n  const { instructions, ingredients } = req.body;\n  console.log(instructions.trim());\n  let ingredientsArray = ingredients.split(',').map(s => s.trim());\n  let instructionsArray = instructions.split(',').map(s => s.trim());\n  console.log(ingredientsArray);\n  console.log(instructionsArray);\n  // const recipe = await req.context.models.Recipe.create({\n  //   title: req.body.title,\n  //   description: req.body.description,\n  //   userId: req.user.dataValues.id\n  // });\n  // console.log('create recipe', recipe);\n  // return res.status(200).json({ message: 'Ok!', data: recipe });\n});\nexport default router;\n"]}