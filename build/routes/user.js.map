{"version":3,"sources":["../../src/routes/user.js"],"names":["router","get","JWTAuth","req","res","context","models","User","findAll","users","status","json","message","data","findById","params","userId","user","dataValues","Recipe","findByUserId","recipes","post","body","username","password","findByLogin","existingUser","bcrypt","hash","then","create","hashedPassword","console","log"],"mappings":"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","file":"user.js","sourcesContent":["import { Router } from 'express';\nimport JWTAuth from '../middleware/JWTAuth';\nimport bcrypt from 'bcrypt';\n\nconst router = Router();\n\nrouter.get('/', JWTAuth, async (req, res) => {\n  const users = await req.context.models.User.findAll();\n  return res.status(200).json({ message: 'Ok', data: users });\n});\n\nrouter.get('/:userId', JWTAuth, async (req, res) => {\n  const user = await req.context.models.User.findById(req.params.userId);\n  return res.status(200).json({ message: 'Ok', user: user.dataValues });\n});\n\nrouter.get('/:userId/recipes', JWTAuth, async (req, res) => {\n  const { userId } = req.params;\n  const recipes = await req.context.models.Recipe.findByUserId(userId);\n  return res.status(200).json({ message: 'Ok!', data: recipes });\n});\n\nrouter.post('/', async (req, res) => {\n  const { username, password } = req.body;\n  const existingUser = await req.context.models.User.findByLogin(username);\n  if (existingUser) {\n    return res\n      .status(400)\n      .json({ message: 'That username is taken. Please choose another.' });\n  } else {\n    bcrypt.hash(password, 10).then(hashedPassword => {\n      req.context.models.User.create({\n        username,\n        password: hashedPassword\n      }).then(user => {\n        console.log('user created', user);\n        return res.status(200).json({ message: 'User created!' });\n      });\n    });\n  }\n});\n\nexport default router;\n"]}